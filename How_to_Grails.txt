/** View -> sytanx -> Groovy.
Using the grails framework from the command line.
Grails comands must be run from the project folder,
for example in the PomodoroApp folder. 

Starting the grails framework: 
	Open Bash in the grails project folder
	enter command: grails
Navigate through files using File Explorer or command line.
Use text editor to write classes ect. 

*/

/** User Guide:
Replace items such as ClassName with your actual class name, replace items 
such as <project_name> with your actual project name, replace its such as data1
with your actual variable name, ect. 

Do not alter commands which follow 'grails' cmd-line instruction.

For more detailed notes see: grails/hello-world

For further clarification see: 

http://grails.github.io/grails-doc/latest/guide/

http://grails.github.io/grails-doc/latest/ref/Command%20Line/Usage.html

else:
grails help
grails <command> help
*/

// Create a Grails project
grails create-app <project_name>

// Create a Domain class
// Domain class stores persistance data.
// Must be created from the project directory
cd <project_name>
grails create-domain-class org.example.ClassName

	package org.example
	class ClassName {
		/**
		package com.andrewparkerdev
		class Task {
		}
		package com.andrewparkerdev
		class Tag {
		}
		*/

	// Define persistance data
	// properties we want to persist must have an expicit type i.e. 'String'
	    String data1
	    String data2
	    Int data3 
	    /** 
	    Class Task {
		    String summary
			String details
			Date dateCreated
			Date deadline
			Long timeSpent = 0L
		}
		Class Tag {
			String name
		}
		*/

	    // Associate this class with multiple other class objects - 'hasMany'
	    static hasMany = [<collection_property>: <domain_instance_of_type>]
	    // Every many to many relationship MUST have a beloning side
	    static belongsTo = org.example.<domain_instance_of_type> 
	    /**
	     Tag and Tasks example:
	    // Tag has many tasks of type Task 
		class Tag {
	    	static hasMany = [tasks: Task]
	    	// Task is the owner
	    	static belongsTo = com.andrewparkerdev.Task 
	    }
	    // Task has many tags of type Tag
	    class Task {
			static hasMany = [tags: Tag]
	    }
	    */
	    
		// Define validation requirements    	
	    static constraints = {
	    	// can't be blank, must be unique
	        data1(blank: false, unique: true)
	        // optional property
	        data2(nullable: true)
	        // minimum value
	        data3 min: 1
	    }
	    /**
	    static constraints = {
	    	summary blank: false, unique: true
	    	details blank: false, maxSize: 1000
	    	deadline nullable: true // nullable default is false
	    	timeSpent min: 0L
	    	name blank: false, unique: true
	    }
	    */
	   
	    // override the toString method
	    // this returns the name of the tag instead of the full path
	    String toString() { return name }
	   
	}

// Create a Controller 
grails create-controller org.example.ClassName // Note the capital C

	package org.example
	class DomainClassController {
		// Enable scaffolding
		// Generating a basic UI for a domain class takes just one line.
	    def scaffold = ClassName
	}
	/**
	class TagController {
		// because the contoller is named after the domain class, 
		// we could also use 'scaffold = true'
		static scaffold = Tag
	}
	class TaskController {
		static scaffold = Task
	}
	*/


// Create index.gsp for each Class
grails generate-views org.example.ClassName

// Start Grails
grails run-app

'http://localhost:8080/'

grails help
grails url-mappings-report
grails stats
grails <comand> help
grails install-templates

/* Directory:
class files: grails-app/domain/com/andrewparkerdev
controllers: grails-app/controllers/com/andrewparkerdev
index.gsp: grails-app/views
messages: build/resources/main
bootstrap: grails-app/init
templates: src\main\templates\scaffolding\
*/

// Automatically create data at server start-up using BootStrap

// To save new data,
// create instanciate a new instance of the domain class.
def workTag = new Tag(
// initialise its properties using name agruements in its constructor.
// name is the property and work is the value we initialise it to. 
	name: 'Work')
//use the special method 'save'
	.save(failOnError: true) 

def homeTag = new Tag(name: "Home").save(failOnError: true) 

// !!! if the domain class is in a package you have to import it !!!!

// A domain class which has a collection property via hasMany gains addTo and 
// removeFrom methods.
task.addToTags(workTag)

 // Scaffolding cont. Customisation of user interface. 
grails install-templates

// HTML / GSP pages are located at: build/resources/main/
// To customise the scaffolding go to the user guide:
URL = 'grails.github.io/grails-doc/latest/guide/single.html'

// Lesson 2 of getting started with Grails:
https://www.youtube.com/watch?v=qNFksvLxZNU&ebc=ANyPxKpMcPmYKzMRn55qBHoTzLYjRm9jaRQQ5Gx_Zenu0BzrXtm30plDLMutjD5xEarGe3iG1D_OuIoisH0aYvj_NV3xVJ04dg
/**
Recap. 
	Up to this point we've created the application 
		with Task and Tag domain model
		and a scaffolding UI
	Scaffolding is useful for:
		getting started
		interacting with the data while building out the "proper" UI
		and administrative interfaces

You wouldn't want to use scaffolding for the final product.

*/
// Creating a customised UI
	// Main page:
		// show a list of tasks and side by for filtering the list

	// Add a new Page




